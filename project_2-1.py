# -*- coding: utf-8 -*-
"""Project_2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18lViyv6EJIuqsxjPHFK4thU9T5KCEL5s
"""

from google.colab import files
import pandas as pd

# CSV 파일 업로드
uploaded = files.upload()

# 결측치를 평균값으로 대체
data_df = data_df.fillna(data_df.mean())

def sort_dataset(dataset_df):
    # 데이터를 'year' 기준으로 오름차순 정렬
    sorted_df = dataset_df.sort_values(by='year')
    return sorted_df

def print_top_10_players_by_year(dataset_df):
    # 연도별로 상위 10명 출력
    for year in range(2015, 2019):
        year_data = dataset_df[dataset_df['year'] == year]

        # in hits (안타, H)
        top_hits = year_data.nlargest(10, 'H')[['batter_name', 'H']]
        print(f'\nTop 10 Players in Hits for {year}:')
        print(top_hits)

        # in batting average (타율, avg)
        top_avg = year_data.nlargest(10, 'avg')[['batter_name', 'avg']]
        print(f'\nTop 10 Players in Batting Average for {year}:')
        print(top_avg)

        # in homerun (홈런, HR)
        top_hr = year_data.nlargest(10, 'HR')[['batter_name', 'HR']]
        print(f'\nTop 10 Players in Homerun for {year}:')
        print(top_hr)

        # in on-base percentage (출루율, OBP)
        top_obp = year_data.nlargest(10, 'OBP')[['batter_name', 'OBP']]
        print(f'\nTop 10 Players in On-base Percentage for {year}:')
        print(top_obp)

def print_highest_war_by_position(dataset_df, year):
    # 특정 연도의 데이터 추출
    year_data = dataset_df[dataset_df['year'] == year]

    # 각 포지션별로 승리 기여도가 가장 높은 선수 찾기
    positions = ['포수', '1루수', '2루수', '3루수', '유격수', '좌익수', '중견수', '우익수']

    for position in positions:
        position_data = year_data[year_data['cp'] == position]
        highest_war_player = position_data.nlargest(1, 'war')[['batter_name', 'war']]

        print(f'\nPlayer with the Highest WAR in {position} for {year}:')
        print(highest_war_player)

def find_highest_correlation_with_salary(dataset_df):
    # 각 변수와 연봉 간의 상관 관계 계산
    correlations = dataset_df[['R', 'H', 'HR', 'RBI', 'SB', 'war', 'avg', 'OBP', 'SLG', 'salary']].corr()

    # 'salary' 열을 제외한 상관 관계 중 가장 큰 값을 찾기
    highest_corr_variable = correlations.loc[correlations.index != 'salary', 'salary'].idxmax()

    # 상관 관계 출력
    print("\nCorrelations with Salary (excluding 'salary'):")
    print(correlations.loc[:, 'salary'])

    print(f"\nThe variable with the highest correlation with salary is: {highest_corr_variable}")

if __name__=='__main__':
    sorted_df = sort_dataset(data_df)

    # 1) Print the top 10 players in hits, batting average, homerun, and on-base percentage for each year from 2015 to 2018
    print_top_10_players_by_year(sorted_df)

    # 2) Print the player with the highest war by position in 2018
    print_highest_war_by_position(sorted_df, 2018)

    # 3) Among R, H, HR, RBI, SB, war, avg, OBP, and SLG, which has the highest correlation with salary?
    find_highest_correlation_with_salary(sorted_df)
